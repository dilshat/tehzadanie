// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: balances.sql

package db

import (
	"context"
)

const createClientBalance = `-- name: CreateClientBalance :one
INSERT INTO balances(client_id, balance) VALUES($1, $2) RETURNING id, client_id, balance
`

type CreateClientBalanceParams struct {
	ClientID int64 `json:"clientID"`
	Balance  int32 `json:"balance"`
}

func (q *Queries) CreateClientBalance(ctx context.Context, arg CreateClientBalanceParams) (Balance, error) {
	row := q.db.QueryRow(ctx, createClientBalance, arg.ClientID, arg.Balance)
	var i Balance
	err := row.Scan(&i.ID, &i.ClientID, &i.Balance)
	return i, err
}

const deposit = `-- name: Deposit :one
UPDATE balances SET balance = balance + $1 WHERE client_id = $2 RETURNING balance
`

type DepositParams struct {
	Balance  int32 `json:"balance"`
	ClientID int64 `json:"clientID"`
}

func (q *Queries) Deposit(ctx context.Context, arg DepositParams) (int32, error) {
	row := q.db.QueryRow(ctx, deposit, arg.Balance, arg.ClientID)
	var balance int32
	err := row.Scan(&balance)
	return balance, err
}

const getClientBalance = `-- name: GetClientBalance :one
SELECT balance FROM balances WHERE client_id = $1 LIMIT 1
`

func (q *Queries) GetClientBalance(ctx context.Context, clientID int64) (int32, error) {
	row := q.db.QueryRow(ctx, getClientBalance, clientID)
	var balance int32
	err := row.Scan(&balance)
	return balance, err
}

const withdraw = `-- name: Withdraw :execrows
UPDATE balances SET balance = balance - $1 WHERE client_id = $2 AND balance - $1 >= 0
`

type WithdrawParams struct {
	Balance  int32 `json:"balance"`
	ClientID int64 `json:"clientID"`
}

func (q *Queries) Withdraw(ctx context.Context, arg WithdrawParams) (int64, error) {
	result, err := q.db.Exec(ctx, withdraw, arg.Balance, arg.ClientID)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}
